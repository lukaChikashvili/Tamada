// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String       @id @default(uuid())
  clerkUserId   String       @unique 
  email         String       @unique 
  name          String?       
  imageUrl      String?      
  phone         String?  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  role          UserRole     @default(USER)
  savedTamadas  UserSavedTamada[]
  meeting       MeetingBooking[]
}


enum UserRole {
  USER
  ADMIN
}

model Tamada {
    id               String       @id @default(uuid())
    name             String
    year             Int // Year of birth or experience
    price            Decimal      @db.Decimal(10, 2) // Price for hiring Tamada
    drinks           Int // Number of drinks consumed or handled
    city             String // City where the Tamada is based
    language         String // Languages spoken by the Tamada
    stomachSize      Int // Size of stomach (small, medium, large)
    description      String // Short bio or listing description
    images          String[] // List of images of the Tamada
    humorLevel       Int // Humor rating (1-10)
    featured          Boolean            @default(false)
    speechQuality    Int // Eloquence rating (1-10)
    nationality      String // Tamada's nationality
    experienceYears  Int // Number of years as a Tamada
    clothingStyle    String // Traditional, modern, mixed
    popularityScore  Int @default(0) // Popularity rating (0-100)
    eventTypes       String // Types of events handled (wedding, supra, corporate, etc.)
    savedBy         UserSavedTamada[] // Users who saved this Tamada
    meetingBookings MeetingBooking[] // Bookings for this Tamada
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@index([name, drinks])
    @@index([price])
    @@index([language])
    @@index([city])
    @@index([stomachSize])
    @@index([experienceYears])
    @@index([popularityScore])
}



model UserSavedTamada {
   id      String     @id @default(uuid())
   userId  String 
   user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
   tamadaId  String
   tamada    Tamada     @relation(fields: [tamadaId], references: [id], onDelete: Cascade)
   savedAt    DateTime   @default(now())

   @@unique([userId, tamadaId])
   @@index([userId])
   @@index([tamadaId])
}

model MeetingBooking {
   id      String     @id @default(uuid())
   tamadaId  String   
   tamada    Tamada      @relation(fields: [tamadaId], references: [id])
   userId   String
   user     User         @relation(fields: [userId], references: [id])
   bookingDate   DateTime     @db.Date
   startTime    String
   endTime     String
   notes  String?
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt

    @@index([tamadaId])
    @@index([userId])
    @@index([bookingDate])
    

}